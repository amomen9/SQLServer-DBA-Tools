-- =============================================
-- Author:              "a-momen"
-- Contact & Report:    "amomen@gmail.com"
-- Update date:         "2024-02-15"
-- Description:         "Random_Pass_Generate"
-- License:             "Please refer to the license file"
-- =============================================



USE master
GO

DROP FUNCTION IF EXISTS dbo.randbetween
GO

-- create the view to store a random number
CREATE OR ALTER VIEW dbo.vRandomNumber
WITH SCHEMABINDING
AS
  SELECT RAND() AS RandomNumber
GO

-- create the view to store a random number
CREATE OR ALTER VIEW dbo.vNewId
WITH SCHEMABINDING
AS
  SELECT NEWID() AS NewId
GO

-- create the function
CREATE OR ALTER FUNCTION dbo.randbetween(@bottom INTEGER, @top INTEGER)
RETURNS INTEGER
WITH 
	SCHEMABINDING,
	RETURNS NULL ON NULL INPUT
AS
BEGIN
	RETURN (SELECT CAST(ROUND((@top-@bottom)* RandomNumber +@bottom,0) AS INTEGER) FROM dbo.vRandomNumber)
END
GO

-- test the function
select 25 [Lower Bound], dbo.randbetween(25,75) [Rand No.], 75 [Upper Bound]

-- create a table to store values generated by the function 
drop table if exists dbo.tblRandBetweenTest
GO

CREATE TABLE dbo.tblRandBetweenTest(
   pkRandBetweenTest int identity (1,1) primary key,
   GeneratedRandomValue integer NOT NULL
) ON [PRIMARY]
GO

SET NOCOUNT ON
go

/*
-- test the function 10,000 times
declare @i as integer
set @i=1
while @i<=10000
begin
   insert into dbo.tblRandBetweenTest values (dbo.randbetween(25,75))
   set @i=@i+1
end
*/
/*
-- select the min, max and average
select 
min(GeneratedRandomValue) as min_x,
max(GeneratedRandomValue) as max_x,
avg(GeneratedRandomValue) as avg_x
from dbo.tblRandBetweenTest
go
*/
/*
-- get the population of the values
select GeneratedRandomValue, count(GeneratedRandomValue) as qty
from dbo.tblRandBetweenTest
group by GeneratedRandomValue
order by GeneratedRandomValue
go
*/

-------------------------------------------------------------------------------------------------GeneratePassword

CREATE or alter FUNCTION dbo.GeneratePassword (@PassLength TINYINT, @IsAlphaNumeric BIT)
RETURNS nvarchar(255)

AS
BEGIN
	DECLARE @randInt int;
	DECLARE @NewCharacter nchar(1); 
	DECLARE @NewPassword nvarchar(255);
	DECLARE @identity INT = 0
	DECLARE @Character_Group_End_Index INT = 0
	
	DECLARE @temp TABLE (id INT IDENTITY (1,1) NOT NULL PRIMARY KEY, subchar NCHAR(1) NOT NULL, type sysname)
	SET @NewPassword='';
	
	-- random characters

--==============================================================================================	
	-- 48 <-> 57 Numbers
	SET @Character_Group_End_Index += (57-48+1)
	WHILE (@identity < @Character_Group_End_Index)
	BEGIN
		SELECT @randInt=dbo.randbetween(48,57)
		--      0-9           < = > ? @ A-Z [ \ ]                   a-z      
		--IF @randInt<=57 OR (@randInt BETWEEN 60 AND 93) OR (@randInt BETWEEN 97 AND 122)
		--Begin
		SELECT @NewCharacter=CHAR(@randInt)
		INSERT @temp
		(
			subchar,
			type
		)
		VALUES
		(
			@NewCharacter,
			'Number'
		)
		SET @identity = SCOPE_IDENTITY()
		--END	
	END


--=======================================================================================
	-- 33 <-> 47 | 58 <-> 64 | 91 <-> 96 | 123 <-> 126		Keyboard Friendly Characters
	SET @Character_Group_End_Index += (47-33+1)+(64-58+1)+(96-91+1)+(126-123+1)
	WHILE (@identity < @Character_Group_End_Index)
	BEGIN
		SELECT @randInt=dbo.randbetween(33,126)
		--      0-9           < = > ? @ A-Z [ \ ]                   a-z      
		IF @randInt<=47 OR (@randInt BETWEEN 58 AND 64) OR (@randInt BETWEEN 91 AND 96) OR (@randInt BETWEEN 123 AND 126)
		Begin
			SELECT @NewCharacter=CHAR(@randInt)
			INSERT @temp
			(
				subchar,
				type
			)
			VALUES
			(
				@NewCharacter,
				'Keyboard Friendly Characters'
			)
			SET @identity = SCOPE_IDENTITY()
		END	
	END


--==============================================================================================	
	-- 65 <-> 90		Uppercase Letters
	SET @Character_Group_End_Index += (90-65+1)
	WHILE (@identity < @Character_Group_End_Index)
	BEGIN
		SELECT @randInt=dbo.randbetween(65,90)
		--      0-9           < = > ? @ A-Z [ \ ]                   a-z      
		--IF @randInt<=57 OR (@randInt BETWEEN 60 AND 93) OR (@randInt BETWEEN 97 AND 122)
		--Begin
		SELECT @NewCharacter=CHAR(@randInt)
		INSERT @temp
		(
			subchar,
			type
		)
		VALUES
		(
			@NewCharacter,
			'Uppercase Letters'
		)
		SET @identity = SCOPE_IDENTITY()
		--END	
	END


--==============================================================================================	
	-- 97 <-> 122		Lowercase Letters
	SET @Character_Group_End_Index += (122-97+1)
	WHILE (@identity < @Character_Group_End_Index)
	BEGIN
		SELECT @randInt=dbo.randbetween(97,122)
		--      0-9           < = > ? @ A-Z [ \ ]                   a-z      
		--IF @randInt<=57 OR (@randInt BETWEEN 60 AND 93) OR (@randInt BETWEEN 97 AND 122)
		--Begin
		SELECT @NewCharacter=CHAR(@randInt)
		INSERT @temp
		(
			subchar,
			type
		)
		VALUES
		(
			@NewCharacter,
			'Number'
		)
		SET @identity = SCOPE_IDENTITY()
		--END	
	END



--==============================================================================================	
	
	SELECT @NewPassword = STRING_AGG(dt.subchar,'')
	FROM 
	(
		SELECT TOP 1000
			subchar
		FROM @temp
		ORDER BY (SELECT NewId FROM dbo.vNewId)
	) dt
	WHERE dt.subchar NOT in (CHAR(39),';','@')


	IF LEN(@NewPassword)<@PassLength AND @@NESTLEVEL<4
		SELECT @NewPassword+=dbo.GeneratePassword(@PassLength,@IsAlphaNumeric)

	

	RETURN(LEFT(@NewPassword,@PassLength));
END;
GO

declare @pass_length int = 15
SELECT dbo.GeneratePassword(@pass_length,1) AS 'NewPassword', @pass_length AS 'Pass Length';


GO

DROP FUNCTION IF EXISTS dbo.ufn_find_random_value
GO
DROP FUNCTION dbo.randbetween
GO
DROP VIEW dbo.vRandomNumber
GO
DROP FUNCTION dbo.GeneratePassword
GO


